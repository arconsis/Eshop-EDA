%dev.quarkus.http.port=8080

quarkus.kafka.devservices.enabled=false

mp.messaging.incoming.warehouse-in.connector=smallrye-kafka
mp.messaging.incoming.warehouse-in.topic=warehouse-db.public.warehouse_outbox_events
mp.messaging.incoming.warehouse-in.value.deserializer=com.arconsis.presentation.events.common.WarehouseEventsDtoDeserializer
mp.messaging.incoming.warehouse-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.warehouse-in.broadcast=true

mp.messaging.incoming.payments-in.connector=smallrye-kafka
mp.messaging.incoming.payments-in.topic=payments-db.public.payments_outbox_events
mp.messaging.incoming.payments-in.value.deserializer=com.arconsis.presentation.events.payments.PaymentEventsDtoDeserializer
mp.messaging.incoming.payments-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer

## producer options
kafka.producer.bootstrap.servers=${KAFKA_BROKERS:localhost:19092,localhost:29092,localhost:39092}
kafka.enable.idempotence=true
#kafka.retries=2147483647
kafka.acks=all
kafka.client.id=order-service-producer

kafka.bootstrap.servers=${KAFKA_BROKERS:localhost:19092,localhost:29092,localhost:39092}
kafka.allow.auto.create.topics = false
kafka.auto.create.topics.enable = false
%prod.kafka.security.protocol = SSL

## Database
datasource.url=postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DB:orders-db}
%dev.quarkus.datasource.reactive.url=vertx-reactive:${datasource.url}
%prod.quarkus.datasource.reactive.url=${datasource.url}
quarkus.datasource.username=${POSTGRES_USER:postgres}
quarkus.datasource.password=${POSTGRES_PASSWORD:secret}
quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc=false
quarkus.hibernate-orm.log.sql=true
%prod.quarkus.datasource.reactive.postgresql.ssl-mode=allow

## Database Migrations
quarkus.flyway.migrate-at-start=false
#%test.quarkus.flyway.migrate-at-start=false
quarkus.flyway.clean-at-start=false
quarkus.flyway.baseline-on-migrate=true
%dev.quarkus.http.port=8082

%prod.kafka.security.protocol = SSL
quarkus.kafka.devservices.enabled=false
quarkus.kafka-streams.application-id=warehouse-service
quarkus.kafka-streams.topics=Orders,OrdersValidations,Shipments,Warehouse
quarkus.kafka-streams.application-server=${hostname:localhost}:${quarkus.http.port}
quarkus.kafka-streams.bootstrap-servers=${KAFKA_BROKERS:localhost:19092,localhost:29092,localhost:39092}

kafka.bootstrap.servers=${KAFKA_BROKERS:localhost:19092,localhost:29092,localhost:39092}
kafka.allow.auto.create.topics = true
kafka.auto.create.topics.enable = true

# streams options
kafka-streams.processing.guarantee=exactly_once
kafka-streams.cache.max.bytes.buffering=10240
kafka-streams.commit.interval.ms=1000
kafka-streams.metadata.max.age.ms=500
kafka-streams.auto.offset.reset=earliest
kafka-streams.metrics.recording.level=DEBUG
kafka-streams.consumer.heartbeat.interval.ms=200
# Use sub-folder of embedded broker, so it gets cleaned by KafkaResource between re-runs
# This does not work for native tests, manually clean-up /tmp/kafka-streams/temperature-aggregator
%test.kafka-streams.state.dir=target/data/kafka-data/stores

mp.messaging.outgoing.warehouse-out.connector=smallrye-kafka
mp.messaging.outgoing.warehouse-out.topic=Warehouse
mp.messaging.outgoing.warehouse-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.warehouse-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer

## producer options
kafka.producer.bootstrap.servers=${KAFKA_BROKERS:localhost:19092,localhost:29092,localhost:39092}
kafka.enable.idempotence=true
#kafka.retries=2147483647
kafka.acks=all
kafka.client.id=warehouse-service-producer
